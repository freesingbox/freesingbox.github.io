<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freesingbox.github.io/news/article-23592.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AOT和单文件发布对程序性能的影响</title>
        <meta name="description" content="前言 这里先和大家介绍一下.NET一些发布的历史，以前的.NET框架原生并不支持最终编译结果的单文件发布（需要依赖第三方工具），我这里新建了一个简单的ASP.NET Core项目，发布以后的目录就会像" />
        <link rel="icon" href="__ADDON__/img/freesingbox/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/website/css/freesingbox/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/website/css/freesingbox/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freesingbox/fontello.css">
    <link href="/assets/website/css/freesingbox/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/css/freesingbox/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/freesingbox/owl.theme.default.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-VLC2BS6BYS"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-VLC2BS6BYS');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="logo">
                                                <a href="/">
                            <span>Free Singbox</span>
                        </a>
                                            </div>
                </div>
                <div class="col-md-9">
                    <div class="navigation-wrapper">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/" title="首页">首页</a> </li>
                                                                <li><a href="/free-nodes/" title="免费节点">免费节点</a> </li>
                                                                <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a> </li>
                                                                <li><a href="/news/" title="新闻资讯">新闻资讯</a> </li>
                                                                <li><a href="#">关于</a> </li>
                                <li><a href="#">联系</a> </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- header-close -->
    <!-- page-header-start -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">AOT和单文件发布对程序性能的影响</h1>
                        <p class="page-text">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- cources-start-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<h2 id="前言">前言</h2> <p>这里先和大家介绍一下.NET一些发布的历史，以前的.NET框架原生并不支持最终编译结果的单文件发布（需要依赖第三方工具），我这里新建了一个简单的ASP.NET Core项目，发布以后的目录就会像下图这样，里面包含很多<code>*.dll</code>文件和其它各类的文件。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1140c8f85c2e0d7bffc38a799be84ae8.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>在.NET Core 2.1时代，引入了单文件发布的功能，只需要在发布命令上，增加<code>-p:PublishSingleFile=true</code>参数就可以使用，从这以后就无需发布的文件夹就再也没有那么多的文件，只有一个<code>*.exe</code>文件和对应的配置文件和用于调试<code>*.pdb</code>的文件，如下所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/508035258066c3c9a28872acfb596891.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 不过此时的.NET还是需要安装一个大小为50~130MB左右的.NET Runtime才能运行，这个其实不利于在客户端场景下程序的分发，大家应该能回忆起在安装一些软件之前，必须安装.NET Framework的场景。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9f01852b70f088950c3b12cd20b92fae.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>在单文件发布推出的同时，也可以通过<code>--self-contained true</code>的参数，将运行时也包含在发布文件内，这样的话就无需在目标机器上再安装.NET Runtime。不过由于它自带运行时，整个发布文件夹的大小就变得很大了，可以说比安装.NET Runtime还要大一些（足足82.4MB）。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/937ad2bff074c18cb935f6d04a3bb7b1.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 程序本质上也就是文件，我们也可以通过压缩程序的方式，让它的大小变小，只需要加上<code>-p:EnableCompressionInSingleFile=true</code>参数。就可以将80MB的程序压缩至44MB左右。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/31ee9fdb11461dd038aad21a135e2c60.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>单文件发布体积大的原因就是包括了所有运行可能用到的依赖，不过有很多依赖是我们程序中用不到的，所以发布的时候可以加<code>-p:PublishTrimmed=true</code>参数，发布的时候移除掉没有使用的依赖，这样体积就可以降低很多（从44MB到35MB）。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e45e9add8d5bf11af4794ab87b1c07fc.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>当然，移除没有使用的依赖和压缩是可以同时使用的，这样发布以后，体积就可以变得更小了，只需要20MB左右。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f94048b50102b272b09df41191e04b48.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 此时.NET运行还是需要自带运行时，在运行.NET程序的时候需要JIT来参与，这样的话在应用启动时需要一定的时间让JIT将MSIL编译到对应平台机器码，随后.NET推出了预览版的<code>Native-AOT</code>，可以在编译时直接将代码编译成对应平台的机器码，以加快启动速度；另外由于不需要自带运行时，它整个的体积大小也变得很小。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1aff6eb59580045d468f3c5b718a358a.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 用于调试的<code>pdb</code>文件就会变得很大，不过真实发布的话也用不到这个文件，可以舍弃。AOT以后的大小也就20MB左右。不过AOT也不是银弹，由于没有了JIT，很多编译时优化就不能做了，Java的GraalVm发布的时候就有一张五边形图，充分的说明了JIT和AOT之间的取舍。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b16254fffb2f9ba9db29e0f72b17f0d7.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> AOT拥有更快的启动速度、更低的内存占用和更小的程序体积；当然它的吞吐量和最大延时表现的就没那么好（另外也会失去很多动态的特性，降低一些编程效率）。</p> <p>心中会有一个疑问，这样的发布方式会对程序的性能有影响嘛？都说AOT会让程序启动速度变快，那么会变快多少呢？</p> <h2 id="评测结果">评测结果</h2> <p>我决定花点时间来研究一下，周末带着上面的问题我设计了一组测试，当然时间仓促有很多不严谨的地方，可以说就图一乐，望大家指出和海涵。一共设计了12个组，主要是对比单文件发布、AOT发布和普通发布的区别；另外我也加入了PGO、TC、OSR和OSA等JIT参数，来看看不同JIT参数的影响。</p> <blockquote> <p><strong>PGO</strong>：PGO 即 Profile Guided Optimization（配置引导优化），通过收集运行时信息来指导 JIT 如何优化代码，相比以前没有 PGO 时可以做更多以前难以完成的优化。可以参考hez大佬的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/hez2010/p/optimize-using-pgo.html"  target="_blank" rel="nofollow">博客</a>，还有一些<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gist.github.com/EgorBo/dc181796683da3d905a5295bfd3dd95b#:~:text=Dynamic%20PGO%20in.NET%206.0%20Dynamic%20PGO%20%28Profile-guided%20optimization%29,hot%20methods%20to%20make%20them%20even%20more%20efficient."  target="_blank" rel="nofollow">链接1</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://devblogs.microsoft.com/dotnet/conversation-about-pgo/"  target="_blank" rel="nofollow">链接2</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/u010285974/article/details/86090417"  target="_blank" rel="nofollow">链接3</a>.</p> </blockquote> <blockquote> <p><strong>TC</strong>：TC 即 Tiered Compilation（分层编译），是一种运行时优化代码的技术，每个C#函数都会由JIT编译成目标平台的机器码，为了让方法能快点运行，JIT一般会很粗犷(并不是最优，生成代码效率比较低)的编译，所以JIT就引入了TC，当某一个方法频繁被调用时，JIT就会为它编译一份更优的代码，这样下一次方法被调用时，它执行的会更有效率。想了解更多关于.NET分层编译可以戳这个<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://devblogs.microsoft.com/dotnet/tiered-compilation-preview-in-net-core-2-1/"  target="_blank" rel="nofollow">链接</a>。</p> </blockquote> <blockquote> <p><strong>OSR</strong>：OSR 即 On-Stack Replacement（栈上替换），OSR是一种在运行时替换正在运行的函数/方法的栈帧的技术。这个是为了分层编译引入的，因为有时候我们运行的方法是一个<code>while(ture)</code>这种死循环方法，分层编译找不到时机能把低优化的代码替换成高优化的代码，所以引入了栈上替换，在方法运行中就可以替换成更优的方法。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/issues/33658"  target="_blank" rel="nofollow">链接1</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.zhihu.com/question/45910849/answer/100636125"  target="_blank" rel="nofollow">链接2</a>。</p> </blockquote> <blockquote> <p><strong>OSR</strong>：OSA 即 Object Stack Allocation （对象栈上分配），在.NET中的引用对象默认是分配在堆上的，回收时需要垃圾回收器介入，而且分配对象时必须初始化内存（全部初始化为0），如果对象的生命周期可控，那么可以将它分配在栈上。这样做的好处就是能降低GC压力（方法栈结束，对象自动释放了），提升性能（可以进行标量替换，访问更快）。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/docs/design/coreclr/jit/object-stack-allocation.md"  target="_blank" rel="nofollow">链接1</a>。</p> </blockquote> <p>每个组的命名和参数如下所示。</p> <table> <thead> <tr> <th>项目</th> <th>备注</th> </tr> </thead> <tbody> <tr> <td>Normal</td> <td>正常发布，对照组</td> </tr> <tr> <td>Normal-WksGC</td> <td>正常方式，使用WorkStationGC</td> </tr> <tr> <td>Normal_PGO</td> <td>正常发布，使用PGO</td> </tr> <tr> <td>Normal_PGO_OSR</td> <td>正常发布，使用OSR</td> </tr> <tr> <td>Normal_PGO_OSR_OSA</td> <td>正常发布，使用PGO+OSR+OSA</td> </tr> <tr> <td>SingleFilePublish</td> <td>普通单文件发布</td> </tr> <tr> <td>SingleFilePublish-SelfContained</td> <td>包含运行时单文件发布</td> </tr> <tr> <td>SingleFilePublish-SelfContained-Trim</td> <td>包含运行时单文件发布+剪裁程序集</td> </tr> <tr> <td>SingleFilePublish-SelfContained-Compress</td> <td>包含运行时单文件发布+压缩程序集</td> </tr> <tr> <td>SingleFilePublish-SelfContained-Trim-Compress</td> <td>包含运行时单文件发布+剪裁+压缩程序集</td> </tr> <tr> <td>AOT-Size</td> <td>AOT编译，使用Size模式</td> </tr> <tr> <td>AOT-Speed</td> <td>AOT编译，使用Speed模式</td> </tr> </tbody> </table> <p>下方的小标题是评测项的方式和评测的结果，每个项我们都会跑5次，最后取平均值。</p> <h3 id="发布相关">发布相关</h3> <p>在本节中，Normal那几项编译参数都是一样的，所以结果几乎没有差别，无需过多关注，忽略就好。</p> <h4 id="发布耗时">发布耗时</h4> <p>发布耗时这个参数，是记录了<code>dotnet publish</code>的耗时，其中会清理<code>/bin、/obj</code>等文件夹，避免缓存带来的影响。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a8aca15dea77cc619fe74e4f8d0e08a2.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>可以看到单文件发布和AOT发布还是比较吃性能的，特别是AOT场景下简单的ASPNET Core项目的发布时间就到了接近30秒和一些Rust、C++项目编译速度有的一拼了，要是更大的项目估计会更长。不过正常发布还是很快的，不会一两秒内都能完成。</p> <h4 id="目录大小">目录大小</h4> <p>目录大小是直接统计发布以后的目录所占用的硬盘空间，<strong>注意：Normal发布都计算了67.5MB的.NET Runtime占用的空间</strong>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f9ceeb8bf842923c9f85b3b119bce10a.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>为什么AOT的目录大小会这么大呢？主要就是上文中提到的用于调试程序的<code>pdb</code>文件变的很大，这是因为AOT以后程序本身缺失很多用于调试的数据，只能存放在<code>pdb</code>文件中，不过这个对于使用没有什么影响，发布时也可以通过<code>-p:DebugType=false</code>和<code>-p:DebugSymbols=false</code>参数让它不生成<code>pdb</code>文件。</p> <h4 id="程序大小">程序大小</h4> <p>程序大小统计只发布文件中需要运行程序的大小，这个是和分发项目息息相关的，越小的程序体积，就越容易分发。<strong>注意：Normal发布都计算了67.5MB的.NET Runtime占用的空间</strong>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dfc0b2c16250f655349d80b93aeb1426.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>如果目标平台已经预装了.NET Runtime，其实正常发布的效率是最高的，只有一百多KB的大小；次之就是单文件发布+自包含运行时+裁剪+压缩，大小只有20来MB，也比较利于分发。AOT的表现也同样亮眼。</p> <h3 id="程序运行相关">程序运行相关</h3> <p>程序运行相关一共有三个指标，分别为启动耗时、应用启动耗时和内存占用，这里没有设置CPU相关的指标，是因为启动程序CPU基本都是0没有太大的参考意义。下方流程图展示了这几个指标的采集时间。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ca08b787581445da07306d1e36666ef5.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <h4 id="启动耗时">启动耗时</h4> <p>程序的启动耗时结果如下所示。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2bfbfd643971228d54f8f36f3c72e236.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 我们可以看到两个极值，最大的单文件+自包含运行时+压缩启动耗时到170ms，因为没有剪裁程序集，需要解压缩的依赖很大，所以启动耗时会比较长一点。最小的AOT-Speed模式只需要16.8ms就能启动程序，看来没有了JIT编译和程序集加载的过程，果然快很多。</p> <h4 id="应用启动耗时">应用启动耗时</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cff5c1f8e23aebb249ea770e853fbc96.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>应用启动耗时和程序启动耗时排列基本一致，像单文件+自包含运行时+压缩启动耗时需要0.5s+才能启动程序，而AOT模式只需要70ms，中间差了七八倍。不过正常发布启动速度也很快，只需要200ms不到的时间。</p> <h4 id="内存占用">内存占用</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ae5e8e3ffedb5db0e80e8bbe70de44af.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 内存占用各个方式差别不大，但是也提醒到了我们，如果想让内存占用小一些，那么可以使用WorkstationGC模式。引入动态PGO之类的JIT增强特性以后，相应的会多占用一些内存。</p> <h3 id="性能压测">性能压测</h3> <p>机器配置：</p> <blockquote> <p>CPU：I7 8750H 关闭超线程<br /> RAM：48GB<br /> Client：设置CPU亲和性，绑定3个核心<br /> Server：设置CPU亲和性，绑定2个核心</p> </blockquote> <p>由于笔者机器配置有限，没有做<code>Client</code>和<code>Server</code>的环境隔离，只做了简单的CPU绑核，所以的出来的数据仅供参考。</p> <h4 id="压测qps">压测QPS</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3e1bec071873ba82ea931d900138afc5.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 可以看到其实各个方式差别不是很大，都取得了<code>4.7Wqps</code>以上的成绩，最大和最小在4%以内。由于这是IO密集型任务，JIT、PGO的优势没有体现出来，后面可以试试一些计算密集型的任务，或者直接看hez的博客，上文介绍PGO中有链接。</p> <h4 id="单次请求耗时">单次请求耗时</h4> <p>下图中在条形图内较大的是<code>单次请求耗时(MAX)</code>，在条形图外的<code>0.x</code>的数据是<code>单次请求耗时(AVG)</code>。单位是<code>ms</code>.<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/875766bd1e24d98e1400c42ba3c8f30c.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 我们发现平均耗时基本在<code>0.3ms</code>左右，AOT和单文件+自包含运行时+剪裁+压缩的表现很亮眼，只有<code>370ms</code>左右。</p> <h4 id="压测内存占用">压测内存占用</h4> <p>下图中深色代表<code>内存占用(MAX)</code>而浅色代表<code>内存占用(AVG)</code>，单位是<code>MB</code>.<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3e57bf9ada2404320f0abda5a6c385ce.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 可以看到除了AOT以外的方式，内存占用是大差不差的，<code>4.7Wqps</code>下只需要<code>25MB</code>左右的内存其实很不错了，近似的数字可以理解为误差；另外开启了JIT特性以后，就需要占用更多的内存。AOT的话内存占用就比较多了，可能GC算法在AOT环境下的优化还不够。</p> <h4 id="压测cpu占用">压测CPU占用</h4> <p>下图中深色代表<code>CPU占用(MAX)</code>而浅色代表<code>CPU占用(AVG)</code>。单位为<code>百分比</code>；1个CPU核心是<code>100%</code>，如果占用5个CPU核心那么就是<code>500%</code>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/69c8748f29ebebc9966bf8c1104b7991.jpg" alt="AOT和单文件发布对程序性能的影响"><br /> 基本上都没有啥区别，但是AOT方式占用率就小了很多，毕竟没有了JIT这个步骤。</p> <h2 id="总结">总结</h2> <p>这个结论也就是<strong>图一乐</strong>，毕竟目前AOT还没有正式发布(已经合并主分支.NET7会正式发布)，还有很多值得优化的地方。另外像OSR、OSA这些特性也还没有完全定下来，下面是一些和对照组比较的百分比数据，原始数据和测试代码见<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/InCerryGit/BlogCode-Single-File-And-AOT-Publish"  target="_blank" rel="nofollow">Github</a>。后续.NET7正式发布了，再跑一下试试。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bfeaddc2eb86ad00482656420232cf34.jpg" alt="AOT和单文件发布对程序性能的影响"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/65fef8452af2457e8638e8ac8bd54cfb.jpg" alt="AOT和单文件发布对程序性能的影响"></p> <p>回答开始提到的问题，总得来说<strong>AOT对缩小软件大小，提升应用启动速度</strong>有着很大的作用，但是目前<strong>需要很长的发布时间和占用更多的内存</strong>。<br /> 另外PGO等一些JIT特性需要比正常情况下占用更多的内存，其性能的优势在这个IO密集的场景没有很好的表现出来。</p> <p>最后在多说几句，我一直觉得C#是一个很好的语言，.NET是一个很好的平台。从2002年一路走来，今年是.NET的第20个年头，各种新特性相继加入，性能也已经站在了第一梯队，希望以后能有更多的发展吧。<br /> PS：在前几天更新的Benchmarks Game数据里面，C# .NET已经是带JIT语言里面跑的最快的了，仅次于C、C++、Rust等编译型语言，详情可见<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/GoodManWEN/Programming-Language-Benchmarks-Visualization"  target="_blank" rel="nofollow">链接1</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html"  target="_blank" rel="nofollow">链接2</a>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bd0c37add70cac46eb19ee4f12650a7e.jpg" alt="AOT和单文件发布对程序性能的影响"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-23121.htm">vue+echarts实现数据实时更新_vue.js_</a></p>
                                        <p>下一个：<a href="/news/article-23593.htm">动物疫苗注射器视频教程（动物疫苗注射注意事项）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-22207.htm" title="天照宠物医院杜坤医生电话（北京天照爱宠物医院）">天照宠物医院杜坤医生电话（北京天照爱宠物医院）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-node-share-links.htm" title="「11月22日」最高速度19M/S，2024年Singbox每天更新免费机场订阅节点链接">「11月22日」最高速度19M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-2-sing-box-github.htm" title="「10月2日」最高速度19.4M/S，2024年Singbox每天更新免费机场订阅节点链接">「10月2日」最高速度19.4M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-23118.htm" title="SpringBoot集成redis简要_在线工具">SpringBoot集成redis简要_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-28-sing-box-node.htm" title="「11月28日」最高速度18.3M/S，2024年Singbox每天更新免费机场订阅节点链接">「11月28日」最高速度18.3M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-10-sing-box-github.htm" title="「9月10日」最高速度19.8M/S，2024年Singbox每天更新免费机场订阅节点链接">「9月10日」最高速度19.8M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-13-today-sing-box-node.htm" title="「10月13日」最高速度18.6M/S，2024年Singbox每天更新免费机场订阅节点链接">「10月13日」最高速度18.6M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-19-sing-box-node-github.htm" title="「11月19日」最高速度20M/S，2024年Singbox每天更新免费机场订阅节点链接">「11月19日」最高速度20M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-18-sing-box-node-github.htm" title="「10月18日」最高速度21.7M/S，2024年Singbox每天更新免费机场订阅节点链接">「10月18日」最高速度21.7M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-26-free-node-subscribe-links.htm" title="「9月26日」最高速度22.5M/S，2024年Singbox每天更新免费机场订阅节点链接">「9月26日」最高速度22.5M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
        <!-- footer start -->
    <div class="footer">
        <div class="container">
            <div class="row">
                <!-- footer-about-close -->
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
                    <div class="footer-line"></div>
                </div>
                <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                    <p>
                        <a href="/">Free Singbox节点订阅官网</a> 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <div class="footer-social">
                        <a href="#"><span><i class="fa fa-facebook"></i></span></a>
                        <a href="#"><span><i class="fa fa-google-plus"></i></span> </a>
                        <a href="#"><span class="active"><i class="fa fa-twitter"></i> </span></a>
                        <a href="#"><span><i class="fa fa-instagram"></i></span> </a>
                        <a href="#"><span><i class=" fa fa-pinterest"></i> </span></a>
                        <a href="#"><span><i class="fa fa-linkedin"></i></span></a> </div>
                </div>
            </div>
        </div>
        <!-- footer-address-close -->
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/freesingbox/jquery-3.5.1.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/freesingbox/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/freesingbox/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/slider.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>