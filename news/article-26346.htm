<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freesingbox.github.io/news/article-26346.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>排序算法详解（java代码实现）_在线工具</title>
        <meta name="description" content="​		排序算法大致分为内部排序和外部排序两种 内部排序：待排序的记录全部放到内存中进行排序，时间复杂度也就等于比较的次数 外部排序：数据量很大，内存无法容纳，需要对外存进行访问再排序，把若干段数据一次" />
        <link rel="icon" href="/assets/website/img/freesingbox/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/website/css/freesingbox/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/website/css/freesingbox/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freesingbox/fontello.css">
    <link href="/assets/website/css/freesingbox/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/css/freesingbox/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/freesingbox/owl.theme.default.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-VLC2BS6BYS"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-VLC2BS6BYS');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="logo">
                                                <a href="/">
                            <span>Free Singbox</span>
                        </a>
                                            </div>
                </div>
                <div class="col-md-9">
                    <div class="navigation-wrapper">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/" title="首页">首页</a> </li>
                                                                <li><a href="/free-nodes/" title="免费节点">免费节点</a> </li>
                                                                <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a> </li>
                                                                <li><a href="/news/" title="新闻资讯">新闻资讯</a> </li>
                                                                <li><a href="#">关于</a> </li>
                                <li><a href="#">联系</a> </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- header-close -->
    <!-- page-header-start -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">排序算法详解（java代码实现）_在线工具</h1>
                        <p class="page-text">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- cources-start-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="SingBoxNode官网订阅站" data-url="https://singboxnode.github.io">
                  				  				  				<p>​		排序算法大致分为内部排序和外部排序两种</p> <p><strong>内部排序：</strong>待排序的记录全部放到内存中进行排序，时间复杂度也就等于比较的次数</p> <p><strong>外部排序：</strong>数据量很大，内存无法容纳，需要对外存进行访问再排序，把若干段数据一次读入内存使用内部排序的方法进行排序后写入外存，再将这若干个已经排序的数据进行归并，时间复杂度等于IO(访问外存)的次数</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/97d004c3673a05f2e4ec46fcba7b271a.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="1冒泡算法">1、冒泡算法</h3> <p>​		交换排序。属于比较简单直观的排序算法，以升序为例（从小到大），每次比较相邻的两个元素，如果左侧元素比右侧的大，则交换两个元素的位置，每次把循环中最大的元素放在循环的最后，像冒泡一样从小到最大。</p> <h4 id="11-算法步骤">1.1 算法步骤</h4> <ol> <li>比较 a[j] 和 a[j+1]，如果 a[j] &gt; a[j+1]，swap交换两个元素在数组中的位置</li> <li>让每一对相邻元素进行以上的比较，直到把最大的值放到比较的数组最后</li> <li>重复以上步骤n-1次</li> </ol> <h4 id="12-时间复杂度">1.2 时间复杂度</h4> <p>​		总共需要比较次数(n为数组元素个数 n &gt;= 1)：</p> </p> <div class="math display">\[O(n)=(n-1)+(n-2)+\cdots+1=\frac{(n-1)*n}{2}\\<br /> 取最高次幂O(n)=n^2<br /> \]</div> </p> <h4 id="13-代码实现">1.3 代码实现</h4> <pre><code class="language-java">public int[] bubbleSort(int[] arr) {     // 外层循环，数组长度为 n，循环次数为 n-1     for (int i = 0; i &lt; arr.length - 1; i++) {         // 内层循环，循环次数为 n-1-i，找到一个最大值放在，arr[n-1-i]的位置         for (int j = 0; j &lt; arr.length - 1 - i; j++) {             // 比较相邻的两个值，把相对大的值放在数组下标大的地方             if (arr[j] &gt; arr[j + 1]) {                 // swap交换                 int temp = arr[j];                 arr[j] = arr[j + 1];                 arr[j + 1] = temp;             }         }     }     return arr; } </code></pre> <h4 id="14-图示">1.4 图示</h4> <p>​		如图，即使第二次循环已经排好序，但是程序不晓得，仍会继续循环进行排序，最后一次，只有两个元素进行排序比较，直接排序完成，排序次数 n-1。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/e6e695569c16ab5b2ecd50c9cabbf5ef.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/a230295efeab071c71a30fa977903420.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="2快速排序">2、快速排序</h3> <p>​		交换排序。选择一个基准值，将数组划分两个区域，左侧的值全部比右侧的值小，然后分别对两个区域继续进行区域的划分与排序，直到排序完成。</p> <h4 id="21-算法步骤">2.1 算法步骤</h4> <ol> <li>从数组中按照一定的规则选择一个元素作为基准值</li> <li>把基准值与其他元素进行比较，将元素分成两部分，把所有比基准值小的值放在左侧，所有比基准值大的放在右侧。即进行区域划分</li> <li>通过递归上述操作，再次将左右两区域进行区域划分，完成排序</li> </ol> <h4 id="22-时间复杂度">2.2 时间复杂度</h4> <p>​		对区域划分取特殊值，假设n为2的幂，每次都将n个数平均划分，所以第一次对一整个区域进行循环n次划分2个区域，第二次对两个区域分别进行循环<span class="math inline">\(\frac{n}{2}\)</span>次，共n次，划分4个区域，第三次对4个区域分别进行循环<span class="math inline">\(\frac{n}{4}\)</span>次，共计n次，以此类推，最后一次为第log<sub>2</sub>n次，划分的每个区域仅有一个元素。即：</p> </p> <div class="math display">\[O(n)=n*log_2n<br /> \]</div> </p> <h4 id="23-代码实现">2.3 代码实现</h4> <pre><code class="language-java">private static int[] quickSort(int[] arr, int left, int right) {     if (left &lt; right) {         int partitionIndex = partition(arr, left, right);         // 左侧右侧区间再分别进行排序         quickSort(arr, left, partitionIndex - 1);         quickSort(arr, partitionIndex + 1, right);     }     return arr; }  // 以基准值将数组arr的left~right区间进行分区，保证返回的下标左侧元素比基准值小，右侧比基准值大 private static int partition(int[] arr, int left, int right) {     // 设定基准值为最左侧元素，本身不参与循环中的交换，仅在最后放到index的位置     int pivot = left;     // 该index用于标记一个下标，代表当前已经遍历的元素中，index位置的元素是最后一个比基准值小的元素     // arr[index]本身以及数组左侧元素都小于基准值     int index = left;     // 遍历left+1~right区间（因为基准值自身不需要进行比较交换）     for (int i = left+1; i &lt;= right; i++) {         if (arr[i] &lt; arr[pivot]) {             // 保证从当前遍历到的最后一个比基准值小的元素的下一个元素开始交换，所以先++再交换             index++;             swap(arr, i, index);         }     }     // 此时index为分界点，arr[index]&lt;arr[index+1]     // 其他元素交换完毕之后arr[index]的值应该为基准值，所以进行元素位置交换     swap(arr, pivot, index);     // 此时arr[index]两侧元素左小右大     return index; } // 元素交换 private static void swap(int[] arr, int i, int j) {     int temp = arr[i];     arr[i] = arr[j];     arr[j] = temp; } </code></pre> <h4 id="24-图示">2.4 图示</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/3ee5c559201556bd4273baf4f4742fbc.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/9a617862af6cf3256d3698b376ed6b60.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="3直接插入排序">3、直接插入排序</h3> <p>​		插入排序。每一次把一个待排序的记录，按照值的大小，插入到有序数组的合适位置。</p> <p>​		相当于把a[n]分割，先排序数组 a[0] ~  a[1]，再 a[0] ~ a[2]，直到 a[0] ~ a[n] 全部排序完成。</p> <h4 id="31-算法步骤">3.1 算法步骤</h4> <ol> <li>第一个元素之前没有值，认为已经排序</li> <li>取下一个待排序元素，下标为 i，向前进行比较</li> <li>如果待排序元素比待比较元素小，则交换位置</li> <li>重复步骤3直到有一个元素等于或者小于待排序元素，此次内循环结束，a[0] ~ a[i]排序完成</li> <li>重复步骤2~4，直到最后一个元素</li> </ol> <h4 id="32-时间复杂度">3.2 时间复杂度</h4> <p>​		认为第一元素已经排好序，从第二个元素开始向前比较，计算需要比较的次数：</p> </p> <div class="math display">\[O(n) = 1+2+3+\cdots+n-1= \frac{(n-1)*n}{2}\\<br /> 即O(n) = n^2<br /> \]</div> </p> <h4 id="33-代码实现">3.3 代码实现</h4> <pre><code class="language-java">public static int[] insertionSort(int[] arr){     // 从第二个元素开始到最后一个元素     for (int i = 1; i &lt;  arr.length; i++) {         // 向前遍历         for( int j = i ; j &gt; 0 ; j -- ){             if( arr[j] &lt; arr[j-1] ){              	swap( arr, j , j-1 );                }              else{                 break;             }                }     }     return arr; } private static void swap(int[] arr, int i, int j) {     int temp = arr[i];     arr[i] = arr[j];     arr[j] = temp; } </code></pre> <h4 id="34-图示">3.4 图示</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/23a0c014af17e3ec9d56717009637006.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/71928a7b2a027ea2860d7ded4ffb7643.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="4希尔排序">4、希尔排序</h3> <p>​		插入排序。因为设计该算法的人叫Shell，所以叫希尔排序，又称缩小增量排序。思路上是将待排序序列分割成若干个子序列进行直接插入排序，并逐渐缩减少子序列个数，直到针对整体进行一次排序。</p> <h4 id="41-算法步骤">4.1 算法步骤</h4> <ol> <li>设置一个递减增量序列 $$t_1,t_2,\cdots,t_k$$，<span class="math inline">\(t_k\)</span>为1</li> <li>按照增量个数k，整体上对序列进行k次排序</li> <li>每次排序，根据增量 t，将序列分割成  (数组长度 /  <span class="math inline">\(t_i\)</span>) 个子序列，对子序列分别进行直接插入排序，当增量为1时，对序列整体进行一次排序</li> </ol> <h4 id="42-时间复杂度">4.2 时间复杂度</h4> <p>​		希尔排序的时间复杂度和增量的选择有关，证明的话我是不会，最坏时间复杂度是<span class="math inline">\(O(n^2)\)</span>，当n在某个范围内时，可以达到<span class="math inline">\(O(n^{1.3})\)</span></p> <h4 id="43-代码实现">4.3 代码实现</h4> <pre><code class="language-java">/** 	该代码与实际算法步骤有区别： 	算法步骤是说针对每个子序列进行直接插入排序，实际上对每个子序列的直插排序是交替进行的 **/ public static void shellSort(int[] arr) {     int length = arr.length;     // 记录需要进行直接插入排序的值     int temp;     // 增量step从length/2递减到1进行循环     for (int step = length / 2; step &gt;= 1; step /= 2) {         // 进行直插排序，默认第一个元素已经排序完成，从step下标的元素开始向前进行直插         for (int i = step; i &lt; length; i++) {             // 需要对arr[i]进行直接插入排序，记录该值             temp = arr[i];             // j来记录temp最后需要插入的位置             int j = i;             while (j -step &gt;= 0 &amp;&amp; arr[j-step] &gt; temp) {                 arr[j] = arr[j-step];                 j -= step;             }             arr[j] = temp;         }     } }  // 使用直接插入版本的代码： private static void shellSort2(int[] arr) {     int len = arr.length;     for (int step = len / 2; step &gt; 0; step = step / 2) {         // 直接插入排序的代码，只不过向前遍历时遍历的数组为i,i-step,i-step-step...         for (int i = step; i &lt; arr.length; i++) {             for (int j = i; j-step &gt;= 0; j -= step) {                 if (arr[j] &lt; arr[j - step]) {                     swap(arr, j, j - step);                 }             }         }     } } private static void swap(int[] arr, int i, int j) {         int temp = arr[i];         arr[i] = arr[j];         arr[j] = temp; } </code></pre> <h4 id="44-图示">4.4 图示</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/2944ff9701c781f9dba7d4b16d357f45.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/86535cbcfafa57f9b31b36d883e0df3e.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="5简单选择排序">5、简单选择排序</h3> <p>​		选择排序。从未排序序列中查找一个最小值，然后将该值放到已排序序列的末尾位置，循环下去，直到最后一个元素。</p> <h4 id="51-算法步骤">5.1 算法步骤</h4> <ol> <li>从 a[i] 开始，i=0,1,2,...,n，在数组中找到最小值的下标，放到arr[i]，此时 a[0] ~ a[i] 有序，a[i+1] ~ a[n] 待排序</li> <li>待排序序列重复步骤1</li> <li>经过n-1次循环完成排序</li> </ol> <h4 id="52-时间复杂度">5.2 时间复杂度</h4> <p>​		循环次数为n-1，n-2，n-3，<span class="math inline">\(\cdots\)</span>，1</p> </p> <div class="math display">\[O(n) = (n-1)+(n-2)+\cdots+1\\<br /> O(n) = \frac{1}{2}(n^2-n)\\<br /> O(n) = n^2<br /> \]</div> </p> <h4 id="53-代码实现">5.3 代码实现</h4> <pre><code class="language-java">public static int[] selectionSort(int[] arr){     // 外层循环经过 n-1 轮比较     for (int i = 0; i &lt; arr.length - 1; i++) {         // min用来记录每次比较过程中最小值的下标         int min = i;         // 0~i已经排序完成，从i向后比较查找后面序列的最小值         for (int j = i + 1; j &lt; arr.length; j++) {             if (arr[j] &lt; arr[min]) {                 // 记录最小值元下标                 min = j;             }         }         // 将找到的最小值和i位置所在的值进行交换         if (i != min) {             swap(arr, i ,min);         }     }     return arr; } </code></pre> <h4 id="54-图示">5.4 图示</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/bc5649c01ebfd456e243b9cad7b8afae.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/16f6d3a14ead7c47d8e14785a1979166.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="6堆排序">6、堆排序</h3> <p>​		选择排序。将待排序列构造诚大根堆，根节点则为序列中最大元素，将该节点与最后一个值交换，把剩余的节点重新构建大根堆，继续进行交换，直到待排序列只剩下一个值。</p> <p>​		大根堆（大顶堆）：父节点一定大于两个子节点的值，即：<strong>arr[i] &gt; arr[2i+1] &amp;&amp; arr[i] &gt; arr[2i+2]</strong></p> <p>​		将大根堆映射到数组中示例：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/4a4cb23d279bc79a38080dcf4dfc17ff.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h4 id="61-算法步骤">6.1 算法步骤</h4> <ol> <li>将待排序数组构建成大根堆（仍然是无序的），根节点则为数组最大值</li> <li>将根节点和最后一个节点进行交换，则最大值放到了数组尾部，此时 a[0] ~ a[n-1] 无序</li> <li>因为步骤2进行了节点交换，需要对 a[0] ~ a[n-1] 重新构建大根堆</li> <li>重复步骤 2，3 直到全部有序</li> </ol> <h4 id="62-时间复杂度">6.2 时间复杂度</h4> <ol> <li><strong>初始化大根堆</strong></li> </ol> <p>​		设元素个数为 n，建堆的高度 <span class="math inline">\(k=log_2(n+1)\)</span>，</p> <p>​		第 i 层的非叶子节点的最大操作（交换）次数为 k-i</p> <p>​		第 i 层的节点个数为 <span class="math inline">\(2^{i-1}\)</span></p> <p>​		所以第 i 层总共需要操作 <span class="math inline">\((k-i)(2^{i-1})\)</span> 次，总共需要操作的次数为</p> </p> <div class="math display">\[S = (k-1)*2^0 + (k-2)*2^{1}+(k-3)*2^2+\cdots+(k-(k-1))*2^{k-1-1}<br /> \]</div> </p> <p>​		用 2S - S计算 S 的值:</p> </p> <div class="math display">\[S = 2^1+2^2+\cdots+2^{k-1}-(k-1)\\<br /> S = 2^k-k-1<br /> \]</div> </p> <p>​		将 <span class="math inline">\(k=log_2{(n+1)}\approx log_2n\)</span> 代入得</p> </p> <div class="math display">\[O(n) = n - log_2n-1<br /> \\取最高项O(n) = n<br /> \]</div> </p> <p>​		则初始化大根堆的时间复杂度 O(n) = n</p> <p>2.<strong>重新调整堆</strong></p> <p>​		根节点和待排序数组的最后一个元素 a[i] 交换之后，需要重新调整堆，最大调整次数 = a[i] 所在堆的层数 = <span class="math inline">\(log_2i\)</span>，总共需要调整的次数 = <span class="math inline">\((n-1)(log_2n)\)</span> ，所以调整堆的时间复杂度为</p> </p> <div class="math display">\[O(n) = nlog_2n<br /> \]</div> </p> <p>总的时间复杂度 <span class="math inline">\(O(n) = n + nlog_2n = nlog_2n\)</span></p> <h4 id="63-代码实现">6.3 代码实现</h4> <pre><code class="language-java">public static int[] HeapSort(int[] arr) {     int len = arr.length;     // 对所有元素建立大根堆     buildMaxHeap(arr, len);     // 从数组尾开始进行循环，每次找到待排序序列的最大值     for (int i = arr.length - 1; i &gt; 0; i--) {         // 此时arr[0]为最大值，交换根节点arr[0]和最后一个节点 i         swap(arr, 0, i);         len--;         // 剩余元素重新建堆         heapify(arr, 0, len);     }     return arr; } private static void buildMaxHeap(int[] arr, int len) {     for (int i = len / 2; i &gt;= 0; i--) {         heapify(arr, i, len);     } } /**  * @param arr       排序数组  * @param parent    父节点下标  * @param len       待排序数组 length  */ private static void heapify(int[] arr, int parent, int len) {     // 计算父节点的两个子节点下标     int left = 2 * parent + 1;     int right = 2 * parent + 2;     // largest为父节点和子节点最大值的下标     int largest = parent;     // 比较左右子节点和父节点的大小     if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) {         largest = left;     }     if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) {         largest = right;     }     // 如果当前的最大值不是当前父节点，需要进行元素交换，     // 交换之后的子节点作为父节点时不一定是大根堆，需要重新建堆     if (largest != parent) {         swap(arr, parent, largest);         heapify(arr, largest, len);     } } private static void swap(int[] arr, int i, int j) {     int temp = arr[i];     arr[i] = arr[j];     arr[j] = temp; } </code></pre> <h4 id="64-图示">6.4 图示</h4> <p>初始化大根堆：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/59d2e9cfdca343ef69948510a8d1a30a.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p>循环取堆顶元素排序：建议自己画二叉树更明晰</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/eced3ce12d32aa67a455e461ec113d54.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p>完整动图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/17e07e8befc771e73546779273359412.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="7归并排序">7、归并排序</h3> <p>​		将两个及以上的有序表合并成一个有序表。以下为两路合并排序。</p> <p>​		采用分治法，把无序数组两两分割，分割数次，然后自下至上将两个子序列进行排序，然后合并成一个有序数组，逐渐向上进行两两合并，直到合并成一个有序数组。</p> <h4 id="71-算法步骤">7.1 算法步骤</h4> <ol> <li>将数组从中间拆分为两个无序数组</li> <li>通过递归继续执行步骤 1</li> <li>通过两个指针指向两个数组的起始位置</li> <li>比较指针指向的两个元素，把较小的放入合并数组，移动指针向后</li> <li>重复步骤4直到某一个指针到达数组尾部，此时另一个数组的元素全部不小于合并数组元素</li> <li>将另一个数组的元素放入合并数组</li> <li>继续归并，直到剩下一个数组</li> </ol> <h4 id="72-时间复杂度">7.2 时间复杂度</h4> <p>​		时间复杂度 = 两个数组归并排序的时间复杂度 + 重建大根堆的时间复杂度</p> <p>​		                   $f(n) = 2f(\frac{n}{2})+ n $</p> <p>​		<span class="math inline">\(n = \frac{n}{2}\)</span> 	 : : 	 <span class="math inline">\(f(\frac{n}{2}) = 2f(\frac{n}{4}) + \frac{n}{4}\)</span></p> <p>​		<span class="math inline">\(n=\frac{n}{4}\)</span>  	: : 	 <span class="math inline">\(f(\frac{n}{4})=2f(\frac{n}{8}) + \frac{n}{8}\)</span></p> <p>​		<span class="math inline">\(\cdots\)</span></p> <p>​		<span class="math inline">\(n=\frac{n}{2^{m-1}}\)</span>  : : 	<span class="math inline">\(f(\frac{n}{2^{m-1}}) = 2f(\frac{n}{2^m}) + \frac{n}{2^{m-1}}\)</span></p> <p>​		即：<span class="math inline">\(f(n) = 2f(\frac{n}{2}) + n\)</span></p> <p>​				<span class="math inline">\(=2[2f(\frac{n}{4} + \frac{n}{4}) + n]\)</span>       		=      $ 2<sup>2f(\frac{n}{2</sup>2}) + 2n$</p> <p>​				<span class="math inline">\(=2^2[f(2f(\frac{n}{8}) + \frac{n}{4})] + 2n\)</span> 	=      <span class="math inline">\(2^3f(\frac{n}{2^3}) + 3n\)</span></p> <p>​				<span class="math inline">\(\cdots\)</span></p> <p>​				<span class="math inline">\(=2^mf(\frac{n}{2^m}) + mn\)</span></p> <p>​		当数组被分割成仅剩一个元素时，此时分割为<span class="math inline">\(2^mf(1)+mn\)</span> 即：  <span class="math inline">\(\frac{n}{2^m} = 1\)</span></p> <p>​		则：<span class="math inline">\(m = log_2n\)</span></p> <p>​		代入得<span class="math inline">\(f(n) = 2^{log_2n}f(1) + n * log_2n = n + nlog_2n\)</span></p> <p>​		所以归并排序的时间复杂度为：</p> </p> <div class="math display">\[O(n) = nlog_2n<br /> \]</div> </p> <h4 id="73-代码实现">7.3 代码实现</h4> <pre><code class="language-java">public static int[] MergeSort(int[] arr) {     // 数组中仅有一个元素==已排序     if (arr.length &lt; 2) {         return arr;     }     // 分割数组的下标     int middle = arr.length / 2;     // 将数组分割成arr[0] ~ arr[middle-1] 和 arr[middle] ~ arr[length-1] 两部分     int[] left = Arrays.copyOfRange(arr, 0, middle);     int[] right = Arrays.copyOfRange(arr, middle, arr.length);     /**      * 可以拆分为      * int[] arr1 = MergeSort(left);      * int[] arr2 = MergeSort(right);      * 对两个分割后的数组分别再进行归并排序      * return merge(arr1, arr2);      */     return merge2(MergeSort(left), MergeSort(right)); } /**  *  将两个数组进行合并方法 1  */ protected static int[] merge1(int[] left, int[] right) {     // 合并后的数组     int[] result = new int[left.length + right.length];     // i 进行计数，直到等于left或者right数组的长度     int i = 0;     // 循环对left和right数组的首个元素进行比较，把小的放入result数组     // 并重新给left或right数组赋值     while (left.length &gt; 0 &amp;&amp; right.length &gt; 0) {         if (left[0] &lt;= right[0]) {             result[i] = left[0];             left = Arrays.copyOfRange(left, 1, left.length);         } else {             result[i] = right[0];             right = Arrays.copyOfRange(right, 1, right.length);         }         i++;     }     // 此时left或right数组有一个已经遍历完毕，直接把剩下的元素全部放入result数组     while (left.length &gt; 0) {         result[i] = left[0];         i++;         left = Arrays.copyOfRange(left, 1, left.length);     }     while (right.length &gt; 0) {         result[i] = right[0];         i++;         right = Arrays.copyOfRange(right, 1, right.length);     }     return result; } /**  *  将两个数组进行合并方法 2  *  个人还是倾向于这个直观的  */ private static int[] merge2(int[] left, int[] right) {     // 合并后的结果     int[] result = new int[left.length + right.length];     // i,j分别用于遍历left，right数组     int i = 0;     int j = 0;     // count用于放入result数组时的下标计数     int count = 0;     // 循环对left和right数组元素进行比较，并把小的赋值给result[count]     // 直到遍历完left或者right数组     while (i &lt; left.length &amp;&amp; j &lt; right.length) {         if (left[i] &lt; right[j]) {             result[count] = left[i];             i++;         } else {             result[count] = right[j];             j++;         }         count++;     }     // 此时left或right数组有一个已经遍历完毕，直接把剩下的元素全部放入result数组     while (i &lt; left.length) {         result[count] = left[i];         i++;         count++;     }     while (j &lt; right.length) {         result[count] = right[j];         j++;         count++;     }     return result; } </code></pre> <h4 id="74-图示">7.4 图示</h4> <p>注：两个图不是同一个算法过程</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/209e700942cea556899ab7c4351091e3.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/d7686aa152976a96f03dcc7110898ce6.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <h3 id="8基数排序">8、基数排序</h3> <p>​		取得最大整数的位数，从个位开始进行比较放入新的数组，再收集起来，此时数组按照个位有序排列，再进位进行比较收集，以此类推，直到最高位比较完成，此时数组全部有序。</p> <h4 id="81-算法步骤">8.1 算法步骤</h4> <ol> <li>取得数组最大数的位数</li> <li>根据数组元素个位数的大小放入不同的数组中</li> <li>按照顺序将数组中的元素收集起来，此时新的数组按数组元素的个位数有序</li> <li>数组元素进位（十位、百位...）按照该位的大小重复2、3</li> <li>直到按照最大位数进行元素收集后所有元素有序</li> </ol> <h4 id="82-时间复杂度">8.2 时间复杂度</h4> <p>​		设n个数的最大值是k位数，需要的桶（收集元素的数组）为r个，进行一次遍历元素收集的时间复杂度为O(n+r)，总的时间复杂度就是O(k(n+r))，一般来说，n &gt;&gt; r 且 n &gt;&gt; k，所以可以认为基数排序的时间复杂度为O(n)，也可以认为事件复杂度为O(kn)。</p> <h4 id="83-代码实现">8.3 代码实现</h4> <pre><code class="language-java">private static int[] RadixSort(int[] arr, int maxDigit) {     int mod = 10;     int dev = 1;     for (int i = 0; i &lt; maxDigit; i++, dev *= 10, mod *= 10) {         // 使用二维数组作为桶存放数据         // 考虑负数的情况，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)         int[][] counter = new int[mod * 2][0];         for (int j = 0; j &lt; arr.length; j++) {             int bucket = ((arr[j] % mod) / dev) + mod;             counter[bucket] = arrayAppend(counter[bucket], arr[j]);         }         // 收集数组中的数据         int pos = 0;         for (int[] bucket : counter) {             for (int value : bucket) {                 arr[pos++] = value;             }         }     }     return arr; } // 自动扩容，并保存数据 private static int[] arrayAppend(int[] arr, int value) {     arr = Arrays.copyOf(arr, arr.length + 1);     arr[arr.length - 1] = value;     return arr; } // 获取最高位数 private static int getMaxDigit(int[] arr) {     int maxValue = getMaxValue(arr);     return getNumLength(maxValue); } // 获取最大值 private static int getMaxValue(int[] arr) {     int maxValue = arr[0];     for (int value : arr) {         if (maxValue &lt; value) {             maxValue = value;         }     }     return maxValue; } // 获取最大值的长度 protected static int getNumLength(long num) {     if (num == 0) {         return 1;     }     int length = 0;     for (long temp = num; temp != 0; temp /= 10) {         length++;     }     return length; } </code></pre> <h4 id="84-图示">8.4 图示</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/3a2a171da06bbf1dfc34c68114798e3b.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/6b718a0836fcbd2659aea2c53e6b3243.jpg" alt="排序算法详解（java代码实现）_在线工具"></p> <p>算法可视化网站：</p> <p>★ <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://algorithm-visualizer.org/"  target="_blank"  rel="nofollow">https://algorithm-visualizer.org/</a>	可以手动更改代码，更改动画速度，英文</p> <p>★ <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://visualgo.net/zh"  target="_blank"  rel="nofollow">https://visualgo.net/zh</a>	算法种类比较多，可中文</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cs.usfca.edu/~galles/visualization/Algorithms.html"  target="_blank"  rel="nofollow">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p> <p>绘图网站：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://app.diagrams.net/"  target="_blank"  rel="nofollow">https://app.diagrams.net/</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-25899.htm">狗粮制造机多少钱（狗粮加工机多少钱）</a></p>
                                        <p>下一个：<a href="/news/article-26347.htm">动物医院资质查询官网网址是什么（动物医院的号码是多少）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-25897.htm" title="SQL知识梳理之关系模型（一）">SQL知识梳理之关系模型（一）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-node-share-links.htm" title="「11月30日」最高速度20.6M/S，2024年Singbox每天更新免费机场订阅节点链接">「11月30日」最高速度20.6M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-node-share-links.htm" title="「11月5日」最高速度19.5M/S，2024年Singbox每天更新免费机场订阅节点链接">「11月5日」最高速度19.5M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-28-sing-box-node.htm" title="「8月28日」最高速度19.5M/S，2024年Singbox每天更新免费机场订阅节点链接">「8月28日」最高速度19.5M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-29-sing-box-node.htm" title="「8月29日」最高速度18.2M/S，2024年Singbox每天更新免费机场订阅节点链接">「8月29日」最高速度18.2M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-27-free-sing-box-node.htm" title="「8月27日」最高速度19.7M/S，2024年Singbox每天更新免费机场订阅节点链接">「8月27日」最高速度19.7M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-27-node-share.htm" title="「10月27日」最高速度19.1M/S，2024年Singbox每天更新免费机场订阅节点链接">「10月27日」最高速度19.1M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-24-node-share-links.htm" title="「10月24日」最高速度20.1M/S，2024年Singbox每天更新免费机场订阅节点链接">「10月24日」最高速度20.1M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-4-sing-box-node-share.htm" title="「10月4日」最高速度22.5M/S，2024年Singbox每天更新免费机场订阅节点链接">「10月4日」最高速度22.5M/S，2024年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-27761.htm" title="Springboot中整合knife4j接口文档">Springboot中整合knife4j接口文档</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
        <!-- footer start -->
    <div class="footer">
        <div class="container">
            <div class="row">
                <!-- footer-about-close -->
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
                    <div class="footer-line"></div>
                </div>
                <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Free Singbox节点订阅官网</a> 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <div class="footer-social">
                        <a href="#"><span><i class="fa fa-facebook"></i></span></a>
                        <a href="#"><span><i class="fa fa-google-plus"></i></span> </a>
                        <a href="#"><span class="active"><i class="fa fa-twitter"></i> </span></a>
                        <a href="#"><span><i class="fa fa-instagram"></i></span> </a>
                        <a href="#"><span><i class=" fa fa-pinterest"></i> </span></a>
                        <a href="#"><span><i class="fa fa-linkedin"></i></span></a> </div>
                </div>
            </div>
        </div>
        <!-- footer-address-close -->
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/freesingbox/jquery-3.5.1.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/freesingbox/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/freesingbox/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/slider.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>