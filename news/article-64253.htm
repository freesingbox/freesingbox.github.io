<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freesingbox.github.io/news/article-64253.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>promise与async/await的使用及区别</title>
        <meta name="description" content="简单的一张图可以直观的表现出 callback、Promise 和 async/await 在使用时的主要区别。 一、callback，Promise，async&amp;await三者的区别? 1." />
        <link rel="icon" href="/assets/website/img/freesingbox/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Singbox节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freesingbox.github.io/news/article-64253.htm" />
    <meta property="og:site_name" content="Free Singbox节点订阅官网" />
    <meta property="og:title" content="promise与async/await的使用及区别" />
    <meta property="og:image" content="https://freesingbox.github.io/uploads/20240823/43490903b0ef6342d007646cf5a45df6.webp" />
        <meta property="og:release_date" content="2025-02-27T05:57:23" />
    <meta property="og:updated_time" content="2025-02-27T05:57:23" />
        <meta property="og:description" content="简单的一张图可以直观的表现出 callback、Promise 和 async/await 在使用时的主要区别。 一、callback，Promise，async&amp;await三者的区别? 1." />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="promise与async/await的使用及区别">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Bootstrap -->
    <link href="/assets/website/css/freesingbox/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/website/css/freesingbox/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freesingbox/fontello.css">
    <link href="/assets/website/css/freesingbox/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/css/freesingbox/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/css/freesingbox/owl.theme.default.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-VLC2BS6BYS"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-VLC2BS6BYS');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="logo">
                        <a href="/">
                                                <span>Free Singbox</span>
                                                </a>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="navigation-wrapper">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/" title="首页">首页</a> </li>
                                                                <li><a href="/free-nodes/" title="免费节点">免费节点</a> </li>
                                                                <li><a href="/paid-subscribe/" title="推荐机场">推荐机场</a> </li>
                                                                <li><a href="/client.htm" title="客户端">客户端</a> </li>
                                                                <li><a href="/news/" title="新闻资讯">新闻资讯</a> </li>
                                                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- header-close -->
    <!-- page-header-start -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">promise与async/await的使用及区别</h1>
                        <p class="page-text">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- cources-start-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="SingBoxNode官网订阅站" data-url="https://singboxnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p><strong>简单的一张图可以直观的表现出 callback、Promise 和 async/await 在使用时的主要区别。</strong><img decoding="async" src="http://img.555519.xyz/uploads3/20220821/18779289b03b76cffbceff6e977aa75f.jpg" alt="promise与async/await的使用及区别"></p> <h2><a id="callbackPromiseasyncawait_2" rel="nofollow"></a>一、callback，Promise，async&amp;await三者的区别?</h2> <p>1.callback 经过深层次的嵌套，会产生回调地狱，需手动检查err参数。<br /> 2.promise 通过链式调用，直接在 then 中返回一个 promise 来进行成功之后的回调函数，用 catch 来做错误处理。<br /> 3.async/await 则直接将其变成了同步的写法，既可以用.catch又可以用try-catch捕捉，简洁，可读性强，写法更加优雅 。</p> <pre><code class="prism language-javascript"><span class="token comment">//try...catch</span><span class="token keyword">const</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'你错啦~~'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span><span class="token function-variable function">asyncFn</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">let</span> result1<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'try...catch:'</span><span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">asyncFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//try...catch:你错啦~~</span><span class="token comment">//catch</span><span class="token keyword">const</span><span class="token function-variable function">asyncFn1</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch:'</span><span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">asyncFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//catch:你错啦~~</span></code></pre> <p><strong>注意: try…catch可以捕获promise异常吗?</strong><br /> 不能，try…catch 主要用于捕获异常，这里的异常，是指同步函数的异常。</p> <h2><a id="Promise_32" rel="nofollow"></a>二、Promise</h2> <h3><a id="1Promise_33" rel="nofollow"></a>1.Promise的特点</h3> <p>1.无法取消Promise，一旦新建它就会立即执行，无法中途取消。<br /> 2.如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。<br /> 3.当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p> <h3><a id="2Promise_37" rel="nofollow"></a>2.Promise的用法</h3> <p><strong>1.Promise的三种状态</strong><br /> pending: 进行中<br /> fulfilled: 成功<br /> rejected: 失败<br /> Promise 构造函数有两个参数 resolve和 reject，分别对应成功和失败后的回调函数</p> <p><strong>2.Promise原型上的方法</strong><br /> then: 成功时的回调<br /> catch: 失败时的回调<br /> finally: 执行完毕后无论其结果怎样都做一些处理</p> <p><strong>3.Promise的静态方法</strong><br /> Promise.all() 有一个Promise对象失败则全部失败，输出第一个失败的原因<br /> Promise.allSettled() 不关心Promise对象的成功或者失败，只关心结果<br /> Promise.any() 返回第一个成功的Promise对象<br /> Promise.race() 返回执行最快的那个Promise对象，无论它是成功还是失败<br /> Promise.resolve() 返回一个状态为成功的Promise对象<br /> Promise.reject() 返回一个状态为失败的Promise对象</p> <pre><code class="prism language-javascript"><span class="token keyword">let</span> p1<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2<span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p4<span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p5<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// reject('reject');</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'five'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">"allBad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span><span class="token string">"allSettled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">"allSettledBad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span><span class="token string">"any"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">"anyBad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4<span class="token punctuation">,</span>p5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span><span class="token string">"race"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">"raceBad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h3><a id="3Promisejshttpsblogcsdnnetm0_48076809articledetails106507707_95" rel="nofollow"></a>3.Promise的运用(请结合<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/m0_48076809/article/details/106507707"  rel="nofollow">js事件循环</a>)</h3> <p>1.红灯3秒亮一次，绿灯1秒亮一次，黄灯2秒亮一次；如何使用Promise让三个灯不断交替重复亮灯？</p> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">mylight</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span><span class="token function-variable function">step</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>     Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">//此处的return返回了新的promise,然后执行后面的.then</span><span class="token keyword">return</span><span class="token function">mylight</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token function">mylight</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token function">mylight</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 递归执行</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p><strong>扩展:使用reduce实现以上代码?</strong><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/m0_48076809/article/details/110734075"  rel="nofollow">reduce用法</a></p> <pre><code class="prism language-javascript"><span class="token comment">// 用reduce相当于往后面叠加.then,跟上面的重复亮灯代码一样</span><span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token literal-property property">time</span><span class="token operator">:</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token literal-property property">time</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token literal-property property">time</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 以上代码简写为:</span><span class="token comment">// arr.reduce((pre, cur) =&gt; pre.then(() =&gt; new Promise(r =&gt; setTimeout(() =&gt; r(console.log(cur.color)), cur.time))), Promise.resolve()).then((params) =&gt; fn(arr))</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre> <p>2.值穿透<br /> 一开始值为基本类型，不停.then后里面的值一直传递下去，只有把then里的值return出去，才能暴露到下一次的.then中</p> <pre><code class="prism language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token comment">//10</span></code></pre> <h2><a id="asyncawait_167" rel="nofollow"></a>三、async与await</h2> <h3><a id="1asyncawait_169" rel="nofollow"></a>1.async与await介绍</h3> <p><strong>async await 需成对出现，async await原理是<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/m0_48076809/article/details/106535197"  rel="nofollow">生成器</a>，<br /> async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，参照 Generator 封装的一套异步处理方案，可以理解为 Generator 的语法糖，<br /> 而 Generator 又依赖于迭代器Iterator，<br /> 而 Iterator 的思想又来源于<font color="red">单向链表。</font></strong></p> <h3><a id="2asyncawait_176" rel="nofollow"></a>2.async和await的用法</h3> <p><strong>1.async和await把异步改为同步，得到最新的state的值</strong><br /> 使用Promise来封装setState(异步编程)</p> <pre><code class="prism language-javascript"><span class="token function-variable function">changeCount</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token comment">//resolve包裹成功时的结果</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">pushRouter</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">//  await this.setState({<!-- --></span><span class="token comment">//     count:this.state.count+1</span><span class="token comment">//   })</span><span class="token keyword">const</span> result<span class="token operator">=</span><span class="token keyword">await</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeCount</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p><strong>2.async，await结合try，catch使用捕获异常</strong></p> <pre><code class="prism language-javascript"><span class="token keyword">async</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span><span class="token punctuation">{<!-- --></span> dispatch<span class="token punctuation">}</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> response<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"netValueQuery/queryListData"</span><span class="token punctuation">,</span><span class="token literal-property property">payload</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>httpStatus<span class="token operator">!==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">throw</span><span class="token keyword">new</span><span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> json<span class="token operator">=</span><span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">data</span><span class="token operator">:</span> json<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>3.多个请求，后面的请求里需使用前面请求里返回的值</strong></p> <pre><code class="prism language-javascript"><span class="token function">getSign</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/share/saveRecord</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> actid<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/lottery/powerTask/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>actid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token function">getReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> task<span class="token operator">=</span><span class="token keyword">await</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token operator">=</span> task<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"分享"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> str<span class="token operator">=</span><span class="token keyword">await</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-64251.htm">tf.keras.layers.Conv1D和tf.keras.layers.Conv1DTranspose</a></p>
                                        <p>下一个：<a href="/news/article-64851.htm">python中sql查询in的使用</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-27761.htm" title="Springboot中整合knife4j接口文档">Springboot中整合knife4j接口文档</a></li>
                        <li class="py-2"><a href="/news/article-57215.htm" title="动物疫苗查询系统怎么查询（动物疫苗批号查询）">动物疫苗查询系统怎么查询（动物疫苗批号查询）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-18-sing-box-node-github.htm" title="「1月18日」最高速度20.5M/S，2025年Singbox每天更新免费机场订阅节点链接">「1月18日」最高速度20.5M/S，2025年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-27-sing-box-node-share.htm" title="「1月27日」最高速度18.8M/S，2025年Singbox每天更新免费机场订阅节点链接">「1月27日」最高速度18.8M/S，2025年Singbox每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-54418.htm" title="《易学C++》第15章 再识对象">《易学C++》第15章 再识对象</a></li>
                        <li class="py-2"><a href="/news/article-42210.htm" title="合肥宠物领养中心（合肥宠物领养救助站）">合肥宠物领养中心（合肥宠物领养救助站）</a></li>
                        <li class="py-2"><a href="/news/article-47179.htm" title="镖局电视剧（午马演过的电视）">镖局电视剧（午马演过的电视）</a></li>
                        <li class="py-2"><a href="/news/article-58353.htm" title="Java四舍五入保留两位小数">Java四舍五入保留两位小数</a></li>
                        <li class="py-2"><a href="/news/article-38246.htm" title="政府购买动物防疫服务外包方案（政府购买动物防疫服务外包方案怎么写）">政府购买动物防疫服务外包方案（政府购买动物防疫服务外包方案怎么写）</a></li>
                        <li class="py-2"><a href="/news/article-52800.htm" title="厦门同安宠物店（同安的宠物店）">厦门同安宠物店（同安的宠物店）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
        <!-- footer start -->
    <div class="footer">
        <div class="container">
            <div class="row">
                <!-- footer-about-close -->
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
                    <div class="footer-line"></div>
                </div>
                <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        <a href="/">Free Singbox节点订阅官网</a> 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <div class="footer-social">
                        <a href="#"><span><i class="fa fa-facebook"></i></span></a>
                        <a href="#"><span><i class="fa fa-google-plus"></i></span> </a>
                        <a href="#"><span class="active"><i class="fa fa-twitter"></i> </span></a>
                        <a href="#"><span><i class="fa fa-instagram"></i></span> </a>
                        <a href="#"><span><i class=" fa fa-pinterest"></i> </span></a>
                        <a href="#"><span><i class="fa fa-linkedin"></i></span></a> </div>
                </div>
            </div>
        </div>
        <!-- footer-address-close -->
    </div>
    <!-- footer close -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/freesingbox/jquery-3.5.1.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/freesingbox/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/freesingbox/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/freesingbox/slider.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>